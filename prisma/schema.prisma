generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum UserRole {
  ADMIN
  MANAGER
  COURIER
  CUSTOMER
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  passwordHash String
  role         UserRole @default(CUSTOMER)
  orders       Order[]  @relation("UserOrders")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Cart         Cart?
}

model Order {
  id        Int         @id @default(autoincrement())
  items     Json
  total     Float
  status    OrderStatus @default(PENDING)
  userId    Int
  user      User        @relation("UserOrders", fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Dish {
  id           Int         @id @default(autoincrement())
  name         String
  description  String
  ingredients  Json // Используем тип Json вместо String[]
  price        Int
  imageUrl     String?
  category     String
  isAvailable  Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  CartItem     CartItem[]
}

model Restaurant {
  id        Int    @id @default(autoincrement())
  name      String
  latitude  Float?
  longitude Float?
  dishes    Dish[]

  description  String? // Описание ресторана
  imageUrl     String? // Основное изображение ресторана, его будешь выводить в главную
  thumbnailUrl String? // Миниатюра, хз генерить или нет. Пока просто загружаем
  topImageUrl  String? // Картинка для верхнего баннера, когда открываем ресторан

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  MenuItem  MenuItem[]
}

model MenuItem {
  id           Int        @id @default(autoincrement())
  name         String
  price        Float
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  dishId    Int
  dish      Dish     @relation(fields: [dishId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([cartId, dishId])
}
