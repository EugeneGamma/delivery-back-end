// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum UserRole {
  ADMIN
  MANAGER
  COURIER
  CUSTOMER
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  name         String
  passwordHash String
  role         UserRole    @default(CUSTOMER)
  orders       Order[]     @relation("UserOrders")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  items       Json
  total       Float
  status      OrderStatus @default(PENDING)
  userId      Int
  user        User        @relation("UserOrders", fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Dish {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  ingredients   Json      // Используем тип Json вместо String[]
  price         Int
  imageUrl      String?
  category      String
  isAvailable   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  restaurant    Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId  Int?
}
model Restaurant {
  id        Int         @id @default(autoincrement())
  name      String
  dishes    Dish[]
  menuItems MenuItem[]  // Добавляем связь с MenuItem
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}


model MenuItem {
  id           Int        @id @default(autoincrement())
  name         String
  price        Float
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
}
