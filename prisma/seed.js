import { PrismaClient } from "@prisma/client";
import { faker } from "@faker-js/faker";
import bcrypt from "bcrypt";
import fs from "fs";

const prisma = new PrismaClient();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const NUM_DISHES = 30;
const NUM_RESTAURANTS = 5;
const NUM_CUSTOMERS = 5;
const DISH_IMAGE_COUNT = 10;

async function main() {
    console.log("üßπ –û—á–∏—â–∞–µ–º –±–∞–∑—É...");
    // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–≤–∞–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
    await prisma.cartItem.deleteMany();
    await prisma.cart.deleteMany();
    await prisma.order.deleteMany();
    await prisma.user.deleteMany();
    await prisma.dish.deleteMany();
    await prisma.restaurant.deleteMany();

    console.log("üë§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏...");
    const testUsers = [];
    const customers = [];

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∞
    const adminPassword = "admin123";
    const adminPasswordHash = await bcrypt.hash(adminPassword, 10);
    const adminUser = await prisma.user.create({
        data: {
            email: "admin@example.com",
            name: "Admin User",
            passwordHash: adminPasswordHash,
            role: "ADMIN",
        },
    });
    testUsers.push({ email: "admin@example.com", password: adminPassword });

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const managerPassword = "manager123";
    const managerPasswordHash = await bcrypt.hash(managerPassword, 10);
    const managerUser = await prisma.user.create({
        data: {
            email: "manager@example.com",
            name: "Manager User",
            passwordHash: managerPasswordHash,
            role: "MANAGER",
        },
    });
    testUsers.push({ email: "manager@example.com", password: managerPassword });

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∫—É—Ä—å–µ—Ä–∞
    const courierPassword = "courier123";
    const courierPasswordHash = await bcrypt.hash(courierPassword, 10);
    const courierUser = await prisma.user.create({
        data: {
            email: "courier@example.com",
            name: "Courier User",
            passwordHash: courierPasswordHash,
            role: "COURIER",
        },
    });
    testUsers.push({ email: "courier@example.com", password: courierPassword });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é CUSTOMER
    for (let i = 0; i < NUM_CUSTOMERS; i++) {
        const email = faker.internet.email().toLowerCase();
        const password = faker.internet.password();
        const passwordHash = await bcrypt.hash(password, 10);

        const customerUser = await prisma.user.create({
            data: {
                email,
                name: faker.person.fullName(),
                passwordHash,
                role: "CUSTOMER",
            },
        });
        customers.push(customerUser);
        testUsers.push({ email, password });
    }

    console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ test-users.json...");
    fs.writeFileSync("test-users.json", JSON.stringify(testUsers, null, 2));

    console.log("üè† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤...");
    const restaurants = [];
    for (let i = 0; i < NUM_RESTAURANTS; i++) {
        const restaurant = await prisma.restaurant.create({
            data: {
                name: faker.company.name(),
            },
        });
        restaurants.push(restaurant);
    }

    console.log("üçΩÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª—é–¥...");
    const dishes = [];
    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    const possibleIngredients = [
        "tomato",
        "basil",
        "mozzarella",
        "olive oil",
        "garlic",
        "onion",
        "pepper",
        "salt",
        "mushroom",
        "chicken",
        "beef",
        "pork",
        "spinach",
        "eggplant",
        "parsley",
        "oregano",
        "potato",
        "carrot",
        "celery",
        "thyme",
        "rosemary",
        "lemon",
        "zucchini",
    ];

    for (let i = 0; i < NUM_DISHES; i++) {
        // –í—ã–±–∏—Ä–∞–µ–º –æ—Ç 3 –¥–æ 5 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        const ingredientCount = faker.number.int({ min: 3, max: 5 });
        const shuffled = faker.helpers.shuffle(possibleIngredients);
        const selectedIngredients = shuffled.slice(0, ingredientCount);

        // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        const dishName = faker.commerce.productName();
        const description = `Enjoy our delicious ${dishName.toLowerCase()} made with a perfect blend of ${selectedIngredients.join(
            ", "
        )}. Savor the taste and aroma in every bite!`;

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è
        const imageIndex = faker.number.int({ min: 1, max: DISH_IMAGE_COUNT });
        const imagePath = `/uploads/seeded/dish_(${imageIndex}).jpg`;

        // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        const randomRestaurant = restaurants[Math.floor(Math.random() * restaurants.length)];

        const dish = await prisma.dish.create({
            data: {
                name: dishName,
                description,
                ingredients: JSON.stringify(selectedIngredients),
                price: faker.number.int({ min: 5000, max: 50000 }),
                imageUrl: imagePath,
                thumbnailUrl: imagePath, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—É—Ç—å –¥–ª—è thumbnail
                category: faker.commerce.department(),
                restaurantId: randomRestaurant.id,
            },
        });
        dishes.push(dish);
    }

    console.log("üõí –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è CUSTOMER)...");
    for (const customer of customers) {
        const cart = await prisma.cart.create({
            data: {
                userId: customer.id,
            },
        });

        const selectedDishes = new Set();
        // –î–æ–±–∞–≤–ª—è–µ–º 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        for (let i = 0; i < 3; i++) {
            let randomDish;
            do {
                randomDish = dishes[Math.floor(Math.random() * dishes.length)];
            } while (selectedDishes.has(randomDish.id));
            selectedDishes.add(randomDish.id);

            await prisma.cartItem.create({
                data: {
                    cartId: cart.id,
                    dishId: randomDish.id,
                    quantity: faker.number.int({ min: 1, max: 5 }),
                },
            });
        }
    }

    console.log("‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
}

main()
    .catch((e) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ seed:", e);
        process.exit(1);
    })
    .finally(async () => {
        await prisma.$disconnect();
    });
